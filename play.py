#!/usr/bin/env python3

from dataclasses import dataclass, field, asdict, fields, astuple, make_dataclass
import time
from typing import NamedTuple, Any
import sys

"""
Implementation of the dataclasses.

Good:
  * Typed data storage
  * Autogenerated code, like __init__, getters, etc
  * Customizing
  * Some control hooks, like __post_init__
  * Inheritance
"""

# Frozen
@dataclass(frozen=True, repr=True, order=True, eq=True)
class C:
    a: int
    b: str = "a"


# Even though b has default value we can override it on the construct time.
c1 = C(a=1, b="b")
c2 = C(1, "ba")
c3 = C(2, "a")
c3_1 = C(2, "a")

assert c3 > c2 > c1
assert c3 == c3_1
assert c1 < c3

print(repr(c1), c1)  # C(a=1, b='b') C(a=1, b='b')

# That gives an error, since c2.a is read-only
# c2.a = 5


def square() -> int:
    return 5

# Factory and post init process.
@dataclass
class C:
    b: str = field(default="ab")
    a: int = field(default_factory=square)

    def __post_init__(self):
        self.a += 1


c = C()
# First we have 5 as the default factory and then post init +1,
# so a is 6. And default is "ab" for b.
print(c)  # C(b='ab', a=6)


# Serialization as dict.
asdict(c)

# Fields: set of Field with name, type and all of the data.
fields(c)


# Serialization as tuple.
astuple(c)


# Create dataclass from factory.
CAgain = make_dataclass('CAgain', [('x', int, field(default=5))])
c_again = CAgain()
print(c_again)  # CAgain(x=5)

# Inheritance
@dataclass
class Base:
    x: Any = 15.0
    y: int = 0

    def __post_init__(self):
        print("Called base")


@dataclass
class FromBase(Base):
    z: int = 10
    x: int = 15


from_base = FromBase()
print(from_base)
# Called base
# FromBase(x=15, y=0, z=10)
# Note x is int there.


S = 0


@dataclass
class TestDC:
    a: int
    b: str

    def change(self):
        global S
        S += self.a


class TestNT(NamedTuple):
    a: int
    b: str

    def change(self):
        global S
        S += self.a


print("Benchmarking")

start_time = time.time()
all_dc = [TestDC(i, "a") for i in range(1000000)]
print("Creation for dataclass: %.5f sec" % (time.time() - start_time))

start_time = time.time()
all_nt = [TestNT(i, "a") for i in range(1000000)]
print("Creation for NamedTuples: %.5f sec" % (time.time() - start_time))

sum = 0
start_time = time.time()
for dc in all_dc:
    sum += dc.a
print("Access for dataclass: %.5f sec" % (time.time() - start_time))

sum = 0
start_time = time.time()
for nt in all_nt:
    sum += nt.a
print("Read for NamedTuples: %.5f sec" % (time.time() - start_time))


start_time = time.time()
for dc in all_dc:
    dc.change()
print("Method for dataclass: %.5f sec" % (time.time() - start_time))


start_time = time.time()
for nt in all_nt:
    nt.change()
print("Method for NamedTuples: %.5f sec" % (time.time() - start_time))

print("Size of dataclass: %.5f" % sys.getsizeof(all_dc[0]))
print("Size of NamedTuples: %.5f" % sys.getsizeof(all_nt[0]))

